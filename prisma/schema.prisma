// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  username     String         @unique
  createdAt    DateTime       @default(now())
  password     String
  statistic    Stat[]
  timers       Timer[]
  tasks        Task[]
  refreshToken RefreshToken[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  ipAddress String?
  userAgent String?
}

model Stat {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  timestamp     DateTime @default(now())
  workingTime   Int
  pauseTime     Int
  pomodorosDone Int
  skipCount     Int
}

model Timer {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  startTime DateTime
  duration  Int
  isActive  Boolean
  type      String
}

model Task {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String
  completed Boolean  @default(false)
  pomodoros Int      @default(0)
  createdAt DateTime @default(now())
}
